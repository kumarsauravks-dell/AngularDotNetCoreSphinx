#Video 1
- What is Angular
    - Frontend Development Framework
    - used to develop Single Page Application
    - Developed by Google

- Introduction to Angular
    - supports MVC Framework
    - Open Source
    - Uses NPM and Command Line Interface(CLI)
    - First released in 14-Sep-2016
    - Current Version is 12.0

- Angular vs Angular.Js
    - Angular.Js is the oldest version not in use now.
    - Latest Version after version2
    - Angular is a re-written version, structured and upgraded Framework.

- Topics Covered
    - Installation, Structure, Basics, MVC, Advance, Routing, API, Forms, Interview, Project, What is new in Angular 12, How to use CSS.

-------------------------------------------------
#Video 2
Setup and Installation 
- Install Node and NPM
    - Install the LTS Version because it is stable. 
    - Check Command-> node -v, npm -v
- Install Angular CLI
    - Command -> npm install -g @angular/cli 
    - Check -> ng version
- Install First Angular App 
    - Command -> ng new blog 
    - cd blog -> code . -> ng serve 
- Interview Questions
    - Install specific version of Angular -> npm i -g @angular/cli@10.0.0
    - Install Angular 2 version and use is simultenously -> nvm (node version manager)

-----------------------------------------------------
#Video 3
- Important Files and Folders for Beginners
    - package.json, node_modules, src folder(app, assets, environments, index.html, main.js, style.css)
- Important Files and Folders for Advance Users 
    - package-lock.json, angular.json, tsconfig Files, .browserslistrc, karma.config.js, pollyfills.js
- Interview Questions
    - What happen when we delete package.json file?
        - Project will stop as it contains all the details and version of every files.
    - Difference b/n package.json and package-lock.json?
        - package.json contains the overall file description/version/commands but package-lock.json contains the detailed description and internal dependenc information of all files used in the Project.
    - What happen when we delete package-lock.json file?
        - Project will not stop as it will reinstall all the details and version of every files from package.json and will generate package-lock.json again.
--------------------------------------------------------
#Video 4
- Change the variable "title" in your app and display heading like "Hello title".
---------------------------------------------------------
#Video 5
- Interpolation
    - used to display dynamic data(properties and functions). eg: Hello {{title}}, Hello {{getTitle()}}
    - can perform mathimatical operation . eg: {{2+2}}
    - can perform comparison . eg: {{title=="Angular"}}
- What we cant perform with Interpolation?
    - Cant do assignment to a variable. eg: {{title="My Title"}}
    - Cant use javascript function like typeOf. eg: {{typeOf(title)}}
    - Cant increment an interger value. eg: {{num++}}
    - Cant use keyword like new. eg: {{new num}}
- Can we set a property value of html element through Interpolation?
    - Yes. eg: class="{{title}}"
-------------------------------------------------------
#Video 6 
- Angular CLI & Important Commands 
    - To see comman Commands -> ng help
    - To create a component -> ng generate component login / ng g c login
    - To create a module -> ng generate module user-auth / ng g m user-auth
    - To create a component inside a folder -> ng g c user-auth/sign-in
    - To create a class -> ng g class dummy
    - To create an Interface -> ng g interface dummyInterface
    - To create a build -> ng build
--------------------------------------------------------
#Video 7
- What happens when we create a component through CLI
    - It will genrate 4 files .ts,.spec,.css,.html and also modifies the app.module.ts to include it in the project.
-----------------------------------------------------------
#Video 8
- Inline style & In Inline Template
    - Inline Style me alag se css file nhi bnegi.
    - command -> ng g c user-list --inline-style
    - verify -> goto component.ts file , Observe instead of styleUrls there is only styles 

    - Inline Template me alag se html file nhi bnegi.
    - command -> ng g c user-list --inline-template
    - verify -> goto component.ts file , Observe instead of templateUrl there is only template 

    - We can create both inline style and template at the same time 
    - command -> ng g c user-list --inline-template --inline-style
----------------------------------------------------------
#Video 9
- Module 
    - A module is like a container which contains Components, Services, Pipes 
    - eg: UserAuth module contains Login, Register, ForgetPassword components ; Services like ApiCall; Pipes like Helper;

- Creating a module and some component iside it.
    - ng g m user-auth
    - ng g c user-auth/login
    - goto user-auth.module.ts , create a exports array and add LoginComponent to that array
    - goto app.module.ts and import UserAuth module and include it in imports array.
    - goto app.component.ts ant try to display the login component there.

- Interview Questions
    Questions: When we define a function for the click event why it is compulsury to define the type because in the previous version it is not compulsory?
    Ans: In Angular 12 , By default strict mode is true in tsconfig.js . If we change it to false then it is not required.
-----------------------------------------------------------
#Video 10
- Events
    - click 
    - keyup - textbox me type kr k rukte hai tab trigger hota hai
    - keydown - type krte hue fire hota rhta hai
    - blur - type kr k dusre element me jayenge tab fire hoga
    - input - jo bhi type kre fire hoga
    - mouseover - control me mouse jayegi to fire hoga.
    - mouseleave - control se mouse leave hogi tab call hoga.
- Interview Questions
    Questions: kya ek control me ek se jada events laga ste hain?
    Ans: Yes
-----------------------------------------------------------
#Video 11
- For an element if we assign it an id like #Box , we can easily access its properties like name,placeholder,value etc.
-----------------------------------------------------------
#Video 13
- Styles in Angular
    - Global Style - If we want to apply a class for global use , we define it in src/style.css file.
    - Component Style - If we want a component related css we define it in its component.css file.
    - Internal Style - We define it in <style></style> of a component.html
- Interview Questions
    Question: Priority of the css
    Ans: Inline>Internal>Component>Global 
------------------------------------------------------------
#Video 14 - Q6
- Property Binding
    - kisi element ki property ko update krne k liye use krte hain.
    - Property Binding ko hum boolean value k sath deal krne k liye krte hain, jabki interpolation me string and numbers k liye. disabled k example k sath samjh skte hain.
#Video 15 - Q7
- If-Else
    - To show the Content inside a if block we have to use ng-template.
-----------------------------------------------------------
#Video 16 - Q8
- Multiple Condition/else if
    - Else if is not present here, if we have to check multiple condition we can use switch.
    - To perform small multiple checks we can compare conditions using ===.
------------------------------------------------------------
#Video 17 - Q9
- Switch statement
    - When we want to check for multiple if else then we use ngSwitch.
    - If no condition matches then we can make use of SwitchDefault.
------------------------------------------------------------
#Video 18
- Loops
    - We can basically use loops to iterate through simple arrays or on object array.
    - We can use loop inside a loop.
    - javascript loop and angular loop are different . Generally we can use javascript loop in ts file but in html we prefer to use angular loop.
-------------------------------------------------------------
#Video 19
- Nested Loops
    - We can have nested arrays inside an array or object.
    - It is also called multidimensional array.
-------------------------------------------------------------
#Video 20
- Style Binding
 - dynamic style binding bhi keh skte hai, means style ka data ts file se aayega.
 - eg: [style.color]='color', [style.backgroundColor]='colorOne'
-------------------------------------------------------------
#Video 21
- Creating a Simple Header Component
    - When we create a header and display it a default margin get added so to correct it we have to add a global style to body ie. margin:0
--------------------------------------------------------------
#Video 22
- Basic Angular Form 
    - make Simple Form , Get Form value, print Form value
    - Steps Involved
        - Import FormsModule from '@angular/forms'; in AppModule and register it in imports array.
        - Give an Id to your form and give value ngForm like #basicForm='ngForm'
        - create a submit event in the 8859<form> tag like (ngSubmit)="getData(basicForm)" or (ngSubmit)="getData(basicForm.value)"
        - for every control we are binding data we have to use a attribut ngModel to it.
        - In component.ts file import the NgForm from '@angular/forms' which is the type of our form data we recieved in function.
- Toggle element
    - We can use *ngIf to Toggle a property.
    - Instead of checking and assigning toggle value to a variable we can just say this.display=!this.display
----------------------------------------------------------------
#Video 23
- Add Bootstrap
    - library hai jo hmare website ko responsive bnati hai.
    - command to install ng-bootstrap -> ng add @ng-bootstrap/ng-bootstrap
    - official website -> ng-bootstrap.github.io
----------------------------------------------------------------
#Video 24
- Install Material UI 
    - official website - https://material.angular.io/
    - Installation command -> ng add @angular/material
    - To use Material UI , we have to import the module of that element iside our module.
    - Material UI is heavier than Bootstrap.
----------------------------------------------------------------
#Video 25
- Created a todo list where user can add task and also remove the task.
----------------------------------------------------------------
#Video 26
- Send Data from Parent to Child Component
    - create a child compomonent.
    - lets say we take app component as parent component.
    - create a variable data and store some number in it.
    - when displaying child we need to send the data value in a property called item. <app-child [item]='data' </app-child>
    - In child component.ts file recieve this item as a input property and display it. @Input item=0;
    - we can add a button in app component and also change the value of data. We must see the item value get reflected in child component.
----------------------------------------------------------------
#Video 27
- Make Component Reusable
    - Create a UserDetails Component which will display list of users. Apart from users list we supplied it can also list other users list which shows that the component is reusable.
----------------------------------------------------------------
#Video 28
- Send Data Child to Parent
    - We can pass data from parent to child using @Input() and from child to parent using @Output
    - We can use property binding to pass data from parent to child and use event binding to pass data from child to parent.
    - In case of @Output we need to have EventEmmiter also.
----------------------------------------------------------------
#Video 29
- Two way binding
    - First import FormsModule from @angular/core.
    - use [(ngModel)] in the textbox
    - same time me ek property ko update krna aur display krna Two way binding kahenge.
    - same time me property ko update and display change event se bhi kr skte hai but ngModel is the simplest way.
----------------------------------------------------------------
#Video 30
- Template Reference variable
    - Hum jo textbox me # k sath ek id dete hain wo hai template Reference variable.
    - Template Reference variable k help se hum us element sare attributes(name,placeholder..etc.) ko access kr skte hain.
    - Type of the variable template Reference variable contains is HtmlInputElement.
-----------------------------------------------------------------
#Video 31
- Basic of typescript
    - To avoid unwanted errors at runtime we use typescript where type can be defined at the time of declaration only.
    - Browser doesnt understand typescript , it converts typescript to javascript finally.
    - we can define 2 types at the same time
        - getData(item:number | boolean){
            if(typeof(item)==="number"){
                return item*20;
            }
        }
    - We can define objects in a variable with the type.
        - data:{name:string,phone:number}={name:'anil',phone:585478596};
    - We can define arrays of specific datatype
        - item:string[]=["Hello","Hi","Hey"]
------------------------------------------------------------------
#Video 32
- Pipes in Angular
    - Use of Pipes -> data ko ek format se dusre me transform kr dete hain.
        - example to make our string in uppercase -> {{title | uppercase}}
    - Problem that can resolve with Pipes -> date format
        - today=Date();
        - {{today | date : 'fullDate'}}
    - We can use two pipes at same time.
    - Pipes hum html k sath use krte hain. Without pipes bhi hum ts file me transform kr k data laa skte hai but it is lenthy and time consuming.
--------------------------------------------------------------------
#Video 33
- Advance Pipes
    - two pipes at same time -> {{title | slice :3:6 | uppercase}}
    - json pipes to display json -> {{user | json}}
    - decimal number in desired format -> {{2.3|number:'3.3-5'}}
    - currency form {{20|currency:'INR'}}
---------------------------------------------------------------------
#Video 34
- Custom Pipes
    - Make a custom pipe with command
    - Apply custom pipe
    - update custom pipe file
    - Apply Params in custom pipe

    - command to create custom pipe -> ng g p usdInr
    - when we create a ndew pipe it implements from PipeTransform
    - we have to change the transform method inside it.
    - first parameter of transform method is value and second is args array. We can basically use these parameter to transform the data retuned.
---------------------------------------------------------------------
#Video 35
- Forms
    - Why Forms are used?
        -To send any kind of data/information to database
        - But angular cant connect to database , so we can send data to api and api update the database
        - Eg: Login,Fb Post , SignUp, google search is also a type of form 
    - Types of Forms
        - Template Driven Form -> mostly work done in component template(.html file)
        - Reactive Form -> mostly work done in component class(.ts file)
    - Data flow with Forms 
        - Template -> Class -> Service -> database
---------------------------------------------------------------------
#Video 36 - Q23
- Template Driven Form Validation
    - Apply Required Validation, Show errors messages, and other Validation Examples.
---------------------------------------------------------------------
#Video 37 - Q24
- Reactive Form in Angular
    - Make Simple form, Import module and form control, Connect Form controls with Form, Get values from form , Default values in Form
    - import {ReactiveFormsModule} from '@angular/forms' in module file
    - import FormGroup and FormControl from '@angular/forms' in component
    - bind the FormGroup with a property in component.html and define that property in component.ts
-----------------------------------------------------------------------
#Video 38 - Q25
- Reactive Form Validation
    - Import Validators, Apply Validators, define getter for fields, show error and disable button.
    - Import Validators from '@angular/forms'
    - Use getter to get the values of the form like
        get user(){
            return this.LoginForm.get('user');
        }
---------------------------------------------------------------------
#Video 39 - Q26
- Directive in Angular
    - Make a directive and update the element
    - Element me kuch additional features provide krti hain.
    - command to create a directive -> ng g directive reEl
---------------------------------------------------------------------
#Video 40
- Basic Routing
    - Create a new project -> routing-blog
    - Create three component -> user , home , about
    - In routing.module.ts file give the path for each component.
    - use routerLink="path" in compomonent.html to define the path of route 
    - Include <router-outlet></router-outlet
- Dynamic Routing
    - Pass data in the routing, Get data in routing
    - Create a path for route with some id 
        {
            path:"user",component:UserComponent
        }
    -  Define the route with specific id
        <a routerLink="user/30">User 30</a>
        <br /><br />
        <a routerLink="user/40">User 40</a>
        <br /><br />
        <a routerLink="user/50">User 50</a>
    - Get the value of the route from the component defined
        constructor(private route:ActivatedRoute) { }

        ngOnInit(): void {
            console.log("user id is "+this.route.snapshot.paramMap.get('id'));
        }
-------------------------------------------------------------------------
#Video 41 
- Wild Card Route - 404 Page
- To include Page not found Page in our route we have to generate a compomonent no-page and define
    {
        path:"**",component:NoPageComponent
    }
-------------------------------------------------------------------------
#Video 42
- Child Routes
    - Make child routes, Make links to child route
    - Create two component about-company, about-me
    - Define the routes for the components like
        {
            path:"about",component:AboutComponent
            ,children:[
            {path:'company',component:AboutCompanyComponent},
            {path:'me',component:AboutMeComponent}
            ]
        }
    - Define the path and set routerLink
        <h1>About Main Page</h1>
        <a routerLink="me">About Me</a>
        <br><br>
        <a routerLink="company">About Company</a>
        <router-outlet></router-outlet>
-------------------------------------------------------------------------
#Video 43  - Q27
- What is Services? Why do we need it?
    - Ek class hoti hai jaha data , properties aur function hote hain jinhe hum multiple files k andar use kr skte hain.
    - command -> ng g s user-data
--------------------------------------------------------------------------
#Video 44 
- Call API in Angular
    - create a service 'user-data'-> import {HttpClient} from '@angular/common/http'
    - import HttpClientModule in your module.ts
    - In the service file register HttpClient like
    constructor(private http:HttpClient){ }
    url="http://localhost:3000/GetAllData";
    users(){
        return this.http.get(this.url);
    }
    - In the component we have to subscribe.
    users:any;
    constructor(private userData:UserDataService){ 
        userData.users().subscribe((data)=>{this.users=data});
    }
    - Post request
        - service.ts
        saveUsers(data:any){
            return this.http.post(this.url,data);
        }
        - component.ts
        getUsersFormData(data:any){
            this.userData.saveUsers(data).subscribe((result)=>{console.log(result)});
        }
--------------------------------------------------------------------------
#Video 45
- Model
    - We can define model to define the datatype of object values , to prevent the further errors.
    export interface dataType{
        name:string,
        id:number,
        indian:boolean,
        address:string
    }
    import {dataType} from './user'
    getData(){
        const data:dataType={
            name:"Kumar",
            id:20,
            indian:true,
            address:'Noida'
        }
        return data;
    }

---------------------------------------------------------------------
Hooks
    - ngOnChanges
        - called when component get created and also when value of @input properties changes 
    - ngOnInit
        - called when component initializes , just after the constructor.
    - ngDoCheck
        - whenever a change is detected,also when an event fires.
    - ngAfterContentInit
        - called after the content that is projected via ng-content
    - ngAfterContentChecked
        - called whenever the ng-content is checked 
    - ngAfterViewInit
        - initialised once the view of the component is rendered
    - ngAfterViewChecked
        - every time a view is checked.
    - ngOnDestroy
        - when a component is about to be destroyed, used for cleanup work
-------------------------------------------------------------------------------Parent child , child parent, form both reactive form and template Driven
- https://github.com/sudheerj/angular-interview-questions

- Component - Basic building block to control HTML Views
- Module - Set of basic build block like component,directive, service
- Template - represents the view
- Services - data which need to shared in diffrent files of Application
- Metadata - used to add more data to an angular class,represented by decorator eg:@Component decorator,@NgModule decorator
- Directive - add behaviour to an existing DOM element
- Pipes - to transform data

- Practice Project -> Shopping Website, Job Portal




    